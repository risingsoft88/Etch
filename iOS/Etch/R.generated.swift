//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 58 images.
  struct image {
    /// Image `btn_done`.
    static let btn_done = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_done")
    /// Image `btn_login`.
    static let btn_login = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_login")
    /// Image `btn_more`.
    static let btn_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_more")
    /// Image `btn_next`.
    static let btn_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_next")
    /// Image `btn_search`.
    static let btn_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_search")
    /// Image `btn_signup`.
    static let btn_signup = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_signup")
    /// Image `icon_apple`.
    static let icon_apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_apple")
    /// Image `icon_back`.
    static let icon_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back")
    /// Image `icon_calendar_off`.
    static let icon_calendar_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_calendar_off")
    /// Image `icon_calendar_on`.
    static let icon_calendar_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_calendar_on")
    /// Image `icon_etch`.
    static let icon_etch = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_etch")
    /// Image `icon_eye`.
    static let icon_eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eye")
    /// Image `icon_facebook`.
    static let icon_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_facebook")
    /// Image `icon_google`.
    static let icon_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_google")
    /// Image `icon_info_red`.
    static let icon_info_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_info_red")
    /// Image `icon_search_off`.
    static let icon_search_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search_off")
    /// Image `icon_search_on`.
    static let icon_search_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search_on")
    /// Image `icon_switch_off`.
    static let icon_switch_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_switch_off")
    /// Image `icon_switch_on`.
    static let icon_switch_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_switch_on")
    /// Image `icon_twitter`.
    static let icon_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_twitter")
    /// Image `img_birthday`.
    static let img_birthday = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_birthday")
    /// Image `img_checkbox_off`.
    static let img_checkbox_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_checkbox_off")
    /// Image `img_checkbox_on`.
    static let img_checkbox_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_checkbox_on")
    /// Image `img_creative_barber_off`.
    static let img_creative_barber_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_barber_off")
    /// Image `img_creative_barber_on`.
    static let img_creative_barber_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_barber_on")
    /// Image `img_creative_bartender_off`.
    static let img_creative_bartender_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_bartender_off")
    /// Image `img_creative_bartender_on`.
    static let img_creative_bartender_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_bartender_on")
    /// Image `img_creative_hairstylist_off`.
    static let img_creative_hairstylist_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_hairstylist_off")
    /// Image `img_creative_hairstylist_on`.
    static let img_creative_hairstylist_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_hairstylist_on")
    /// Image `img_creative_makeup_off`.
    static let img_creative_makeup_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_makeup_off")
    /// Image `img_creative_makeup_on`.
    static let img_creative_makeup_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_makeup_on")
    /// Image `img_creative_photographer_off`.
    static let img_creative_photographer_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_photographer_off")
    /// Image `img_creative_photographer_on`.
    static let img_creative_photographer_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_photographer_on")
    /// Image `img_creative_physicaltrainer_off`.
    static let img_creative_physicaltrainer_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_physicaltrainer_off")
    /// Image `img_creative_physicaltrainer_on`.
    static let img_creative_physicaltrainer_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_physicaltrainer_on")
    /// Image `img_creative_privatechef_off`.
    static let img_creative_privatechef_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_privatechef_off")
    /// Image `img_creative_privatechef_on`.
    static let img_creative_privatechef_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_privatechef_on")
    /// Image `img_creative_stylist_off`.
    static let img_creative_stylist_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_stylist_off")
    /// Image `img_creative_stylist_on`.
    static let img_creative_stylist_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creative_stylist_on")
    /// Image `img_creatives`.
    static let img_creatives = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_creatives")
    /// Image `img_login`.
    static let img_login = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_login")
    /// Image `img_logo_dark_home`.
    static let img_logo_dark_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_logo_dark_home")
    /// Image `img_logo_dark`.
    static let img_logo_dark = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_logo_dark")
    /// Image `img_logo_white_home`.
    static let img_logo_white_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_logo_white_home")
    /// Image `img_logo`.
    static let img_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_logo")
    /// Image `img_onboarding_clients1`.
    static let img_onboarding_clients1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_onboarding_clients1")
    /// Image `img_onboarding_clients2`.
    static let img_onboarding_clients2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_onboarding_clients2")
    /// Image `img_onboarding_clients3`.
    static let img_onboarding_clients3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_onboarding_clients3")
    /// Image `img_onboarding_creatives1`.
    static let img_onboarding_creatives1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_onboarding_creatives1")
    /// Image `img_onboarding_creatives2`.
    static let img_onboarding_creatives2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_onboarding_creatives2")
    /// Image `img_onboarding_creatives3`.
    static let img_onboarding_creatives3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_onboarding_creatives3")
    /// Image `img_splash_logo_white`.
    static let img_splash_logo_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_splash_logo_white")
    /// Image `img_temp_calendar`.
    static let img_temp_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_temp_calendar")
    /// Image `img_temp_hscroll`.
    static let img_temp_hscroll = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_temp_hscroll")
    /// Image `img_temp_vscroll`.
    static let img_temp_vscroll = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_temp_vscroll")
    /// Image `img_triangle_down`.
    static let img_triangle_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_triangle_down")
    /// Image `img_type_client`.
    static let img_type_client = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_type_client")
    /// Image `img_type_creator`.
    static let img_type_creator = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_type_creator")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_done", bundle: ..., traitCollection: ...)`
    static func btn_done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_done, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_login", bundle: ..., traitCollection: ...)`
    static func btn_login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_more", bundle: ..., traitCollection: ...)`
    static func btn_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_more, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_next", bundle: ..., traitCollection: ...)`
    static func btn_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_search", bundle: ..., traitCollection: ...)`
    static func btn_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_signup", bundle: ..., traitCollection: ...)`
    static func btn_signup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_signup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_apple", bundle: ..., traitCollection: ...)`
    static func icon_apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_back", bundle: ..., traitCollection: ...)`
    static func icon_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_calendar_off", bundle: ..., traitCollection: ...)`
    static func icon_calendar_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_calendar_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_calendar_on", bundle: ..., traitCollection: ...)`
    static func icon_calendar_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_calendar_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_etch", bundle: ..., traitCollection: ...)`
    static func icon_etch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_etch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_eye", bundle: ..., traitCollection: ...)`
    static func icon_eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_facebook", bundle: ..., traitCollection: ...)`
    static func icon_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_google", bundle: ..., traitCollection: ...)`
    static func icon_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_info_red", bundle: ..., traitCollection: ...)`
    static func icon_info_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_info_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_search_off", bundle: ..., traitCollection: ...)`
    static func icon_search_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_search_on", bundle: ..., traitCollection: ...)`
    static func icon_search_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_switch_off", bundle: ..., traitCollection: ...)`
    static func icon_switch_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_switch_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_switch_on", bundle: ..., traitCollection: ...)`
    static func icon_switch_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_switch_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_twitter", bundle: ..., traitCollection: ...)`
    static func icon_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_twitter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_birthday", bundle: ..., traitCollection: ...)`
    static func img_birthday(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_birthday, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_checkbox_off", bundle: ..., traitCollection: ...)`
    static func img_checkbox_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_checkbox_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_checkbox_on", bundle: ..., traitCollection: ...)`
    static func img_checkbox_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_checkbox_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_barber_off", bundle: ..., traitCollection: ...)`
    static func img_creative_barber_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_barber_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_barber_on", bundle: ..., traitCollection: ...)`
    static func img_creative_barber_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_barber_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_bartender_off", bundle: ..., traitCollection: ...)`
    static func img_creative_bartender_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_bartender_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_bartender_on", bundle: ..., traitCollection: ...)`
    static func img_creative_bartender_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_bartender_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_hairstylist_off", bundle: ..., traitCollection: ...)`
    static func img_creative_hairstylist_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_hairstylist_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_hairstylist_on", bundle: ..., traitCollection: ...)`
    static func img_creative_hairstylist_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_hairstylist_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_makeup_off", bundle: ..., traitCollection: ...)`
    static func img_creative_makeup_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_makeup_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_makeup_on", bundle: ..., traitCollection: ...)`
    static func img_creative_makeup_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_makeup_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_photographer_off", bundle: ..., traitCollection: ...)`
    static func img_creative_photographer_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_photographer_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_photographer_on", bundle: ..., traitCollection: ...)`
    static func img_creative_photographer_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_photographer_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_physicaltrainer_off", bundle: ..., traitCollection: ...)`
    static func img_creative_physicaltrainer_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_physicaltrainer_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_physicaltrainer_on", bundle: ..., traitCollection: ...)`
    static func img_creative_physicaltrainer_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_physicaltrainer_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_privatechef_off", bundle: ..., traitCollection: ...)`
    static func img_creative_privatechef_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_privatechef_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_privatechef_on", bundle: ..., traitCollection: ...)`
    static func img_creative_privatechef_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_privatechef_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_stylist_off", bundle: ..., traitCollection: ...)`
    static func img_creative_stylist_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_stylist_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creative_stylist_on", bundle: ..., traitCollection: ...)`
    static func img_creative_stylist_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creative_stylist_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_creatives", bundle: ..., traitCollection: ...)`
    static func img_creatives(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_creatives, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_login", bundle: ..., traitCollection: ...)`
    static func img_login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_logo", bundle: ..., traitCollection: ...)`
    static func img_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_logo_dark", bundle: ..., traitCollection: ...)`
    static func img_logo_dark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_logo_dark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_logo_dark_home", bundle: ..., traitCollection: ...)`
    static func img_logo_dark_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_logo_dark_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_logo_white_home", bundle: ..., traitCollection: ...)`
    static func img_logo_white_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_logo_white_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_onboarding_clients1", bundle: ..., traitCollection: ...)`
    static func img_onboarding_clients1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_onboarding_clients1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_onboarding_clients2", bundle: ..., traitCollection: ...)`
    static func img_onboarding_clients2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_onboarding_clients2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_onboarding_clients3", bundle: ..., traitCollection: ...)`
    static func img_onboarding_clients3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_onboarding_clients3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_onboarding_creatives1", bundle: ..., traitCollection: ...)`
    static func img_onboarding_creatives1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_onboarding_creatives1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_onboarding_creatives2", bundle: ..., traitCollection: ...)`
    static func img_onboarding_creatives2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_onboarding_creatives2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_onboarding_creatives3", bundle: ..., traitCollection: ...)`
    static func img_onboarding_creatives3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_onboarding_creatives3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_splash_logo_white", bundle: ..., traitCollection: ...)`
    static func img_splash_logo_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_splash_logo_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_temp_calendar", bundle: ..., traitCollection: ...)`
    static func img_temp_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_temp_calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_temp_hscroll", bundle: ..., traitCollection: ...)`
    static func img_temp_hscroll(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_temp_hscroll, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_temp_vscroll", bundle: ..., traitCollection: ...)`
    static func img_temp_vscroll(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_temp_vscroll, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_triangle_down", bundle: ..., traitCollection: ...)`
    static func img_triangle_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_triangle_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_type_client", bundle: ..., traitCollection: ...)`
    static func img_type_client(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_type_client, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_type_creator", bundle: ..., traitCollection: ...)`
    static func img_type_creator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_type_creator, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "img_splash_logo_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_splash_logo_white' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginWithViewController

      let bundle = R.hostingBundle
      let calendarViewController = StoryboardViewControllerResource<CalendarViewController>(identifier: "CalendarViewController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let loginWithViewController = StoryboardViewControllerResource<LoginWithViewController>(identifier: "LoginWithViewController")
      let name = "Main"
      let onboardingViewController = StoryboardViewControllerResource<OnboardingViewController>(identifier: "OnboardingViewController")
      let passwordResetViewController = StoryboardViewControllerResource<PasswordResetViewController>(identifier: "PasswordResetViewController")
      let signupConfirmViewController = StoryboardViewControllerResource<SignupConfirmViewController>(identifier: "SignupConfirmViewController")
      let signupCreativesViewController = StoryboardViewControllerResource<SignupCreativesViewController>(identifier: "SignupCreativesViewController")
      let signupTypeViewController = StoryboardViewControllerResource<SignupTypeViewController>(identifier: "SignupTypeViewController")
      let signupViewController = StoryboardViewControllerResource<SignupViewController>(identifier: "SignupViewController")

      func calendarViewController(_: Void = ()) -> CalendarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: calendarViewController)
      }

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func loginWithViewController(_: Void = ()) -> LoginWithViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginWithViewController)
      }

      func onboardingViewController(_: Void = ()) -> OnboardingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onboardingViewController)
      }

      func passwordResetViewController(_: Void = ()) -> PasswordResetViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: passwordResetViewController)
      }

      func signupConfirmViewController(_: Void = ()) -> SignupConfirmViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupConfirmViewController)
      }

      func signupCreativesViewController(_: Void = ()) -> SignupCreativesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupCreativesViewController)
      }

      func signupTypeViewController(_: Void = ()) -> SignupTypeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupTypeViewController)
      }

      func signupViewController(_: Void = ()) -> SignupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "btn_done", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_done' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_login' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_next' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_signup", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_signup' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_apple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_apple' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_calendar_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_calendar_off' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_calendar_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_calendar_on' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_etch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_etch' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_eye", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_eye' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_facebook' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_google' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_info_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_info_red' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_search_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_search_off' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_search_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_search_on' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_switch_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_switch_on' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_twitter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_twitter' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_checkbox_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_checkbox_on' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_creative_barber_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_creative_barber_off' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_creative_bartender_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_creative_bartender_off' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_creative_hairstylist_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_creative_hairstylist_off' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_creative_makeup_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_creative_makeup_off' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_creative_photographer_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_creative_photographer_off' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_creative_physicaltrainer_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_creative_physicaltrainer_off' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_creative_privatechef_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_creative_privatechef_off' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_creative_stylist_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_creative_stylist_off' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_login' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_logo_dark_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo_dark_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_logo_white_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_logo_white_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_temp_calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_temp_calendar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_triangle_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_triangle_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_type_client", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_type_client' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_type_creator", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_type_creator' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().calendarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'calendarViewController' could not be loaded from storyboard 'Main' as 'CalendarViewController'.") }
        if _R.storyboard.main().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().loginWithViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginWithViewController' could not be loaded from storyboard 'Main' as 'LoginWithViewController'.") }
        if _R.storyboard.main().onboardingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onboardingViewController' could not be loaded from storyboard 'Main' as 'OnboardingViewController'.") }
        if _R.storyboard.main().passwordResetViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'passwordResetViewController' could not be loaded from storyboard 'Main' as 'PasswordResetViewController'.") }
        if _R.storyboard.main().signupConfirmViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupConfirmViewController' could not be loaded from storyboard 'Main' as 'SignupConfirmViewController'.") }
        if _R.storyboard.main().signupCreativesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupCreativesViewController' could not be loaded from storyboard 'Main' as 'SignupCreativesViewController'.") }
        if _R.storyboard.main().signupTypeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupTypeViewController' could not be loaded from storyboard 'Main' as 'SignupTypeViewController'.") }
        if _R.storyboard.main().signupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupViewController' could not be loaded from storyboard 'Main' as 'SignupViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
